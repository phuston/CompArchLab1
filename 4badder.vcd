$date
	Fri Oct  9 17:06:34 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test32badder $end
$var wire 32 ! sum [31:0] $end
$var wire 1 " overflow $end
$var wire 1 # carryout $end
$var reg 32 $ a [31:0] $end
$var reg 32 % b [31:0] $end
$scope module factor32 $end
$var wire 32 & a [31:0] $end
$var wire 32 ' b [31:0] $end
$var wire 1 " overflow $end
$var wire 32 ( diff [31:0] $end
$var wire 1 # carryout $end
$scope module fadder32 $end
$var wire 1 ) AxnB $end
$var wire 1 * BxS $end
$var wire 32 + a [31:0] $end
$var wire 32 , b [31:0] $end
$var wire 1 - carryin $end
$var wire 1 " overflow $end
$var wire 32 . sum [31:0] $end
$var wire 1 # carryout $end
$var wire 1 / carry0 $end
$scope module adder0 $end
$var wire 16 0 a [15:0] $end
$var wire 16 1 b [15:0] $end
$var wire 1 - carryin $end
$var wire 16 2 sum [15:0] $end
$var wire 1 / carryout $end
$var wire 1 3 carry2 $end
$var wire 1 4 carry1 $end
$var wire 1 5 carry0 $end
$scope module adder0 $end
$var wire 4 6 a [3:0] $end
$var wire 4 7 b [3:0] $end
$var wire 1 - carryin $end
$var wire 4 8 sum [3:0] $end
$var wire 1 5 carryout $end
$var wire 1 9 carry2 $end
$var wire 1 : carry1 $end
$var wire 1 ; carry0 $end
$scope module adder0 $end
$var wire 1 < AandB $end
$var wire 1 = AxorB $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 - carryin $end
$var wire 1 ; carryout $end
$var wire 1 @ fullAnd $end
$var wire 1 A out $end
$upscope $end
$scope module adder1 $end
$var wire 1 B AandB $end
$var wire 1 C AxorB $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 ; carryin $end
$var wire 1 : carryout $end
$var wire 1 F fullAnd $end
$var wire 1 G out $end
$upscope $end
$scope module adder2 $end
$var wire 1 H AandB $end
$var wire 1 I AxorB $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 : carryin $end
$var wire 1 9 carryout $end
$var wire 1 L fullAnd $end
$var wire 1 M out $end
$upscope $end
$scope module adder3 $end
$var wire 1 N AandB $end
$var wire 1 O AxorB $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 9 carryin $end
$var wire 1 5 carryout $end
$var wire 1 R fullAnd $end
$var wire 1 S out $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 4 T a [3:0] $end
$var wire 4 U b [3:0] $end
$var wire 1 5 carryin $end
$var wire 4 V sum [3:0] $end
$var wire 1 4 carryout $end
$var wire 1 W carry2 $end
$var wire 1 X carry1 $end
$var wire 1 Y carry0 $end
$scope module adder0 $end
$var wire 1 Z AandB $end
$var wire 1 [ AxorB $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 5 carryin $end
$var wire 1 Y carryout $end
$var wire 1 ^ fullAnd $end
$var wire 1 _ out $end
$upscope $end
$scope module adder1 $end
$var wire 1 ` AandB $end
$var wire 1 a AxorB $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 Y carryin $end
$var wire 1 X carryout $end
$var wire 1 d fullAnd $end
$var wire 1 e out $end
$upscope $end
$scope module adder2 $end
$var wire 1 f AandB $end
$var wire 1 g AxorB $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 X carryin $end
$var wire 1 W carryout $end
$var wire 1 j fullAnd $end
$var wire 1 k out $end
$upscope $end
$scope module adder3 $end
$var wire 1 l AandB $end
$var wire 1 m AxorB $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 W carryin $end
$var wire 1 4 carryout $end
$var wire 1 p fullAnd $end
$var wire 1 q out $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 4 r a [3:0] $end
$var wire 4 s b [3:0] $end
$var wire 1 4 carryin $end
$var wire 4 t sum [3:0] $end
$var wire 1 3 carryout $end
$var wire 1 u carry2 $end
$var wire 1 v carry1 $end
$var wire 1 w carry0 $end
$scope module adder0 $end
$var wire 1 x AandB $end
$var wire 1 y AxorB $end
$var wire 1 z a $end
$var wire 1 { b $end
$var wire 1 4 carryin $end
$var wire 1 w carryout $end
$var wire 1 | fullAnd $end
$var wire 1 } out $end
$upscope $end
$scope module adder1 $end
$var wire 1 ~ AandB $end
$var wire 1 !" AxorB $end
$var wire 1 "" a $end
$var wire 1 #" b $end
$var wire 1 w carryin $end
$var wire 1 v carryout $end
$var wire 1 $" fullAnd $end
$var wire 1 %" out $end
$upscope $end
$scope module adder2 $end
$var wire 1 &" AandB $end
$var wire 1 '" AxorB $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 v carryin $end
$var wire 1 u carryout $end
$var wire 1 *" fullAnd $end
$var wire 1 +" out $end
$upscope $end
$scope module adder3 $end
$var wire 1 ," AandB $end
$var wire 1 -" AxorB $end
$var wire 1 ." a $end
$var wire 1 /" b $end
$var wire 1 u carryin $end
$var wire 1 3 carryout $end
$var wire 1 0" fullAnd $end
$var wire 1 1" out $end
$upscope $end
$upscope $end
$scope module adder3 $end
$var wire 4 2" a [3:0] $end
$var wire 4 3" b [3:0] $end
$var wire 1 3 carryin $end
$var wire 4 4" sum [3:0] $end
$var wire 1 / carryout $end
$var wire 1 5" carry2 $end
$var wire 1 6" carry1 $end
$var wire 1 7" carry0 $end
$scope module adder0 $end
$var wire 1 8" AandB $end
$var wire 1 9" AxorB $end
$var wire 1 :" a $end
$var wire 1 ;" b $end
$var wire 1 3 carryin $end
$var wire 1 7" carryout $end
$var wire 1 <" fullAnd $end
$var wire 1 =" out $end
$upscope $end
$scope module adder1 $end
$var wire 1 >" AandB $end
$var wire 1 ?" AxorB $end
$var wire 1 @" a $end
$var wire 1 A" b $end
$var wire 1 7" carryin $end
$var wire 1 6" carryout $end
$var wire 1 B" fullAnd $end
$var wire 1 C" out $end
$upscope $end
$scope module adder2 $end
$var wire 1 D" AandB $end
$var wire 1 E" AxorB $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var wire 1 6" carryin $end
$var wire 1 5" carryout $end
$var wire 1 H" fullAnd $end
$var wire 1 I" out $end
$upscope $end
$scope module adder3 $end
$var wire 1 J" AandB $end
$var wire 1 K" AxorB $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 5" carryin $end
$var wire 1 / carryout $end
$var wire 1 N" fullAnd $end
$var wire 1 O" out $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 16 P" a [15:0] $end
$var wire 16 Q" b [15:0] $end
$var wire 1 / carryin $end
$var wire 16 R" sum [15:0] $end
$var wire 1 # carryout $end
$var wire 1 S" carry2 $end
$var wire 1 T" carry1 $end
$var wire 1 U" carry0 $end
$scope module adder0 $end
$var wire 4 V" a [3:0] $end
$var wire 4 W" b [3:0] $end
$var wire 1 / carryin $end
$var wire 4 X" sum [3:0] $end
$var wire 1 U" carryout $end
$var wire 1 Y" carry2 $end
$var wire 1 Z" carry1 $end
$var wire 1 [" carry0 $end
$scope module adder0 $end
$var wire 1 \" AandB $end
$var wire 1 ]" AxorB $end
$var wire 1 ^" a $end
$var wire 1 _" b $end
$var wire 1 / carryin $end
$var wire 1 [" carryout $end
$var wire 1 `" fullAnd $end
$var wire 1 a" out $end
$upscope $end
$scope module adder1 $end
$var wire 1 b" AandB $end
$var wire 1 c" AxorB $end
$var wire 1 d" a $end
$var wire 1 e" b $end
$var wire 1 [" carryin $end
$var wire 1 Z" carryout $end
$var wire 1 f" fullAnd $end
$var wire 1 g" out $end
$upscope $end
$scope module adder2 $end
$var wire 1 h" AandB $end
$var wire 1 i" AxorB $end
$var wire 1 j" a $end
$var wire 1 k" b $end
$var wire 1 Z" carryin $end
$var wire 1 Y" carryout $end
$var wire 1 l" fullAnd $end
$var wire 1 m" out $end
$upscope $end
$scope module adder3 $end
$var wire 1 n" AandB $end
$var wire 1 o" AxorB $end
$var wire 1 p" a $end
$var wire 1 q" b $end
$var wire 1 Y" carryin $end
$var wire 1 U" carryout $end
$var wire 1 r" fullAnd $end
$var wire 1 s" out $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 4 t" a [3:0] $end
$var wire 4 u" b [3:0] $end
$var wire 1 U" carryin $end
$var wire 4 v" sum [3:0] $end
$var wire 1 T" carryout $end
$var wire 1 w" carry2 $end
$var wire 1 x" carry1 $end
$var wire 1 y" carry0 $end
$scope module adder0 $end
$var wire 1 z" AandB $end
$var wire 1 {" AxorB $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 U" carryin $end
$var wire 1 y" carryout $end
$var wire 1 ~" fullAnd $end
$var wire 1 !# out $end
$upscope $end
$scope module adder1 $end
$var wire 1 "# AandB $end
$var wire 1 ## AxorB $end
$var wire 1 $# a $end
$var wire 1 %# b $end
$var wire 1 y" carryin $end
$var wire 1 x" carryout $end
$var wire 1 &# fullAnd $end
$var wire 1 '# out $end
$upscope $end
$scope module adder2 $end
$var wire 1 (# AandB $end
$var wire 1 )# AxorB $end
$var wire 1 *# a $end
$var wire 1 +# b $end
$var wire 1 x" carryin $end
$var wire 1 w" carryout $end
$var wire 1 ,# fullAnd $end
$var wire 1 -# out $end
$upscope $end
$scope module adder3 $end
$var wire 1 .# AandB $end
$var wire 1 /# AxorB $end
$var wire 1 0# a $end
$var wire 1 1# b $end
$var wire 1 w" carryin $end
$var wire 1 T" carryout $end
$var wire 1 2# fullAnd $end
$var wire 1 3# out $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 4 4# a [3:0] $end
$var wire 4 5# b [3:0] $end
$var wire 1 T" carryin $end
$var wire 4 6# sum [3:0] $end
$var wire 1 S" carryout $end
$var wire 1 7# carry2 $end
$var wire 1 8# carry1 $end
$var wire 1 9# carry0 $end
$scope module adder0 $end
$var wire 1 :# AandB $end
$var wire 1 ;# AxorB $end
$var wire 1 <# a $end
$var wire 1 =# b $end
$var wire 1 T" carryin $end
$var wire 1 9# carryout $end
$var wire 1 ># fullAnd $end
$var wire 1 ?# out $end
$upscope $end
$scope module adder1 $end
$var wire 1 @# AandB $end
$var wire 1 A# AxorB $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 9# carryin $end
$var wire 1 8# carryout $end
$var wire 1 D# fullAnd $end
$var wire 1 E# out $end
$upscope $end
$scope module adder2 $end
$var wire 1 F# AandB $end
$var wire 1 G# AxorB $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 8# carryin $end
$var wire 1 7# carryout $end
$var wire 1 J# fullAnd $end
$var wire 1 K# out $end
$upscope $end
$scope module adder3 $end
$var wire 1 L# AandB $end
$var wire 1 M# AxorB $end
$var wire 1 N# a $end
$var wire 1 O# b $end
$var wire 1 7# carryin $end
$var wire 1 S" carryout $end
$var wire 1 P# fullAnd $end
$var wire 1 Q# out $end
$upscope $end
$upscope $end
$scope module adder3 $end
$var wire 4 R# a [3:0] $end
$var wire 4 S# b [3:0] $end
$var wire 1 S" carryin $end
$var wire 4 T# sum [3:0] $end
$var wire 1 # carryout $end
$var wire 1 U# carry2 $end
$var wire 1 V# carry1 $end
$var wire 1 W# carry0 $end
$scope module adder0 $end
$var wire 1 X# AandB $end
$var wire 1 Y# AxorB $end
$var wire 1 Z# a $end
$var wire 1 [# b $end
$var wire 1 S" carryin $end
$var wire 1 W# carryout $end
$var wire 1 \# fullAnd $end
$var wire 1 ]# out $end
$upscope $end
$scope module adder1 $end
$var wire 1 ^# AandB $end
$var wire 1 _# AxorB $end
$var wire 1 `# a $end
$var wire 1 a# b $end
$var wire 1 W# carryin $end
$var wire 1 V# carryout $end
$var wire 1 b# fullAnd $end
$var wire 1 c# out $end
$upscope $end
$scope module adder2 $end
$var wire 1 d# AandB $end
$var wire 1 e# AxorB $end
$var wire 1 f# a $end
$var wire 1 g# b $end
$var wire 1 V# carryin $end
$var wire 1 U# carryout $end
$var wire 1 h# fullAnd $end
$var wire 1 i# out $end
$upscope $end
$scope module adder3 $end
$var wire 1 j# AandB $end
$var wire 1 k# AxorB $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 U# carryin $end
$var wire 1 # carryout $end
$var wire 1 n# fullAnd $end
$var wire 1 o# out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xo#
xn#
1m#
1l#
xk#
xj#
xi#
xh#
1g#
0f#
xe#
xd#
xc#
xb#
1a#
0`#
x_#
x^#
x]#
x\#
1[#
0Z#
xY#
xX#
xW#
xV#
xU#
bx T#
b1111 S#
b1000 R#
xQ#
xP#
1O#
0N#
xM#
xL#
xK#
xJ#
1I#
0H#
xG#
xF#
xE#
xD#
1C#
0B#
xA#
x@#
x?#
x>#
1=#
0<#
x;#
x:#
x9#
x8#
x7#
bx 6#
b1111 5#
b0 4#
x3#
x2#
11#
00#
x/#
x.#
x-#
x,#
1+#
0*#
x)#
x(#
x'#
x&#
1%#
0$#
x##
x"#
x!#
x~"
1}"
0|"
x{"
xz"
xy"
xx"
xw"
bx v"
b1111 u"
b0 t"
xs"
xr"
1q"
0p"
xo"
xn"
xm"
xl"
1k"
0j"
xi"
xh"
xg"
xf"
1e"
0d"
xc"
xb"
xa"
x`"
1_"
0^"
x]"
x\"
x["
xZ"
xY"
bx X"
b1111 W"
b0 V"
xU"
xT"
xS"
bx R"
b1111111111111111 Q"
b1000000000000000 P"
xO"
xN"
1M"
0L"
xK"
xJ"
xI"
xH"
1G"
0F"
xE"
xD"
xC"
xB"
1A"
0@"
x?"
x>"
x="
x<"
1;"
0:"
x9"
x8"
x7"
x6"
x5"
bx 4"
b1111 3"
b0 2"
x1"
x0"
1/"
0."
x-"
x,"
x+"
x*"
1)"
0("
x'"
x&"
x%"
x$"
1#"
0""
x!"
x~
x}
x|
1{
0z
xy
xx
xw
xv
xu
bx t
b1111 s
b0 r
xq
xp
1o
0n
xm
xl
xk
xj
1i
0h
xg
xf
xe
xd
1c
0b
xa
x`
x_
x^
1]
0\
x[
xZ
xY
xX
xW
bx V
b1111 U
b0 T
xS
xR
1Q
0P
xO
xN
xM
xL
1K
0J
xI
xH
xG
xF
1E
0D
xC
xB
xA
x@
0?
0>
x=
x<
x;
x:
x9
bx 8
b1110 7
b0 6
x5
x4
x3
bx 2
b1111111111111110 1
b0 0
x/
bx .
1-
b11111111111111111111111111111110 ,
b10000000000000000000000000000000 +
x*
x)
bx (
b1 '
b10000000000000000000000000000000 &
b1 %
b10000000000000000000000000000000 $
x#
x"
bx !
$end
#20
0=
1C
1I
1O
1[
1a
1g
1m
1y
1!"
1'"
1-"
19"
1?"
1E"
1K"
1]"
1c"
1i"
1o"
1{"
1##
1)#
1/#
1;#
1A#
1G#
1M#
1Y#
1_#
1e#
0k#
1j#
0<
0B
0H
0N
0Z
0`
0f
0l
0x
0~
0&"
0,"
08"
0>"
0D"
0J"
0\"
0b"
0h"
0n"
0z"
0"#
0(#
0.#
0:#
0@#
0F#
0L#
0X#
0^#
0d#
1)
#40
0@
bx1 !
bx1 (
bx1 .
bx1 2
bx1 8
1A
0n#
#60
0;
1#
#80
0F
bx11 !
bx11 (
bx11 .
bx11 2
bx11 8
1G
#100
0:
#120
0L
bx111 !
bx111 (
bx111 .
bx111 2
bx111 8
1M
#140
09
#160
0R
bx1111 !
bx1111 (
bx1111 .
bx1111 2
b1111 8
1S
#180
05
#200
0^
bx11111 !
bx11111 (
bx11111 .
bx11111 2
bx1 V
1_
#220
0Y
#240
0d
bx111111 !
bx111111 (
bx111111 .
bx111111 2
bx11 V
1e
#260
0X
#280
0j
bx1111111 !
bx1111111 (
bx1111111 .
bx1111111 2
bx111 V
1k
#300
0W
#320
0p
bx11111111 !
bx11111111 (
bx11111111 .
bx11111111 2
b1111 V
1q
#340
04
#360
0|
bx111111111 !
bx111111111 (
bx111111111 .
bx111111111 2
bx1 t
1}
#380
0w
#400
0$"
bx1111111111 !
bx1111111111 (
bx1111111111 .
bx1111111111 2
bx11 t
1%"
#420
0v
#440
0*"
bx11111111111 !
bx11111111111 (
bx11111111111 .
bx11111111111 2
bx111 t
1+"
#460
0u
#480
00"
bx111111111111 !
bx111111111111 (
bx111111111111 .
bx111111111111 2
b1111 t
11"
#500
03
#520
0<"
bx1111111111111 !
bx1111111111111 (
bx1111111111111 .
bx1111111111111 2
bx1 4"
1="
#540
07"
#560
0B"
bx11111111111111 !
bx11111111111111 (
bx11111111111111 .
bx11111111111111 2
bx11 4"
1C"
#580
06"
#600
0H"
bx111111111111111 !
bx111111111111111 (
bx111111111111111 .
bx111111111111111 2
bx111 4"
1I"
#620
05"
#640
0N"
bx1111111111111111 !
bx1111111111111111 (
bx1111111111111111 .
b1111111111111111 2
b1111 4"
1O"
#660
0/
#680
0`"
bx11111111111111111 !
bx11111111111111111 (
bx11111111111111111 .
bx1 R"
bx1 X"
1a"
#700
0["
#720
0f"
bx111111111111111111 !
bx111111111111111111 (
bx111111111111111111 .
bx11 R"
bx11 X"
1g"
#740
0Z"
#760
0l"
bx1111111111111111111 !
bx1111111111111111111 (
bx1111111111111111111 .
bx111 R"
bx111 X"
1m"
#780
0Y"
#800
0r"
bx11111111111111111111 !
bx11111111111111111111 (
bx11111111111111111111 .
bx1111 R"
b1111 X"
1s"
#820
0U"
#840
0~"
bx111111111111111111111 !
bx111111111111111111111 (
bx111111111111111111111 .
bx11111 R"
bx1 v"
1!#
#860
0y"
#880
0&#
bx1111111111111111111111 !
bx1111111111111111111111 (
bx1111111111111111111111 .
bx111111 R"
bx11 v"
1'#
#900
0x"
#920
0,#
bx11111111111111111111111 !
bx11111111111111111111111 (
bx11111111111111111111111 .
bx1111111 R"
bx111 v"
1-#
#940
0w"
#960
02#
bx111111111111111111111111 !
bx111111111111111111111111 (
bx111111111111111111111111 .
bx11111111 R"
b1111 v"
13#
#980
0T"
#1000
0>#
bx1111111111111111111111111 !
bx1111111111111111111111111 (
bx1111111111111111111111111 .
bx111111111 R"
bx1 6#
1?#
#1020
09#
#1040
0D#
bx11111111111111111111111111 !
bx11111111111111111111111111 (
bx11111111111111111111111111 .
bx1111111111 R"
bx11 6#
1E#
#1060
08#
#1080
0J#
bx111111111111111111111111111 !
bx111111111111111111111111111 (
bx111111111111111111111111111 .
bx11111111111 R"
bx111 6#
1K#
#1100
07#
#1120
0P#
bx1111111111111111111111111111 !
bx1111111111111111111111111111 (
bx1111111111111111111111111111 .
bx111111111111 R"
b1111 6#
1Q#
#1140
0S"
#1160
0\#
bx11111111111111111111111111111 !
bx11111111111111111111111111111 (
bx11111111111111111111111111111 .
bx1111111111111 R"
bx1 T#
1]#
#1180
0W#
#1200
0b#
bx111111111111111111111111111111 !
bx111111111111111111111111111111 (
bx111111111111111111111111111111 .
bx11111111111111 R"
bx11 T#
1c#
#1220
0V#
#1240
0h#
bx1111111111111111111111111111111 !
bx1111111111111111111111111111111 (
bx1111111111111111111111111111111 .
bx111111111111111 R"
bx111 T#
1i#
#1260
0U#
#1280
b1111111111111111111111111111111 !
b1111111111111111111111111111111 (
b1111111111111111111111111111111 .
b111111111111111 R"
b111 T#
0o#
#1300
1*
#1320
1"
#1500
